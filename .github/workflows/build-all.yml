name: Build ALL Images

on:
  workflow_call:
    inputs:
      build_all_images:
        description: 'Build all images'
        type: boolean
        required: true
        default: true
      build_alicloud_image:
        description: 'Build Alicloud image'
        type: boolean
        required: true
        default: false
      build_aws_image:
        description: 'Build AWS image'
        type: boolean
        required: true
        default: false
      build_azure_image:
        description: 'Build Azure image'
        type: boolean
        required: true
        default: false
      build_digital_ocean_image:
        description: 'Build Digital Ocean image'
        type: boolean
        required: true
        default: false
      build_gcp_image:
        description: 'Build GCP image'
        type: boolean
        required: true
        default: false
      build_hetzner_image:
        description: 'Build Hetzner image'
        type: boolean
        required: true
        default: false
      build_huawei_image:
        description: 'Build Huawei image'
        type: boolean
        required: true
        default: false
      build_ibm_image:
        description: 'Build IBM image'
        type: boolean
        required: true
        default: false
      build_linode_image:
        description: 'Build Linode image'
        type: boolean
        required: true
        default: false
      build_oci_image:
        description: 'Build Oracle Cloud image'
        type: boolean
        required: true
        default: false
      build_ovh_image:
        description: 'Build OVH image'
        type: boolean
        required: true
        default: false
      build_tencent_image:
        description: 'Build Tencent image'
        type: boolean
        required: true
        default: false
      build_vultr_image:
        description: 'Build Vultr image'
        type: boolean
        required: true
        default: false

jobs:
  determine-matrix:
    runs-on: ubuntu-24.04
    
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
    - name: Generate Build Matrix
      id: set-matrix
      run: |
        # Color codes
        GREEN='\033[38;5;82m'   # Bright green
        ORANGE='\033[38;5;208m' # Bright orange
        RED='\033[38;5;196m'    # Bright red
        RESET='\033[0m'         # Reset to default color

        # Logging functions for colored messages
        log_success() {
            printf "${GREEN}[SUCCESS] %s${RESET}\n\n" "$1"
        }
        log_warning() {
            printf "${ORANGE}[WARNING] %s${ORANGE}\n" "$1"
        }
        log_error() {
            printf "${RED}[ERROR] %s${RESET}\n" "$1"
        }
        log_info() {
            printf "[INFO] %s\n" "$1"
        }
      
        # Generate build matrix
        log_info "Generating build matrix..."

        MATRIX=$(jq -n '[ \
          { name: "alicloud", path: "build-alicloud.yml@main",           flag: "${{ github.event.inputs.build_alicloud_image }}" }, \
          { name: "aws", path: "build-aws.yml@main",                     flag: "${{ github.event.inputs.build_aws_image }}" }, \
          { name: "azure", path: "build-azure.yml@main",                 flag: "${{ github.event.inputs.build_azure_image }}" }, \
          { name: "digital_ocean", path: "build-digital-ocean.yml@main", flag: "${{ github.event.inputs.build_digital_ocean_image }}" }, \
          { name: "gcp", path: "build-gcp.yml@main",                     flag: "${{ github.event.inputs.build_gcp_image }}" }, \
          { name: "hetzner", path: "build-hetzner.yml@main",             flag: "${{ github.event.inputs.build_hetzner_image }}" }, \
          { name: "huawei", path: "build-huawei.yml@main",               flag: "${{ github.event.inputs.build_huawei_image }}" }, \
          { name: "ibm", path: "build-ibm.yml@main",                     flag: "${{ github.event.inputs.build_ibm_image }}" }, \
          { name: "linode", path: "build-linode.yml@main",               flag: "${{ github.event.inputs.build_linode_image }}" }, \
          { name: "oci", path: "build-oci.yml@main",                     flag: "${{ github.event.inputs.build_oci_image }}" }, \
          { name: "ovh", path: "build-ovh.yml@main",                     flag: "${{ github.event.inputs.build_ovh_image }}" }, \
          { name: "tencent", path: "build-tencent.yml@main",             flag: "${{ github.event.inputs.build_tencent_image }}" }, \
          { name: "vultr", path: "build-vultr.yml@main",                 flag: "${{ github.event.inputs.build_vultr_image }}" } \
        ] | map(select(.flag == "true" or "${{ github.event.inputs.build_all_images }}" == "true")) | map({name, path})') || {
          log_error "Failed to generate build matrix."
          exit 1 
        }

        log_success "Successfully generated build matrix."

        # Output build matrix
        log_info "Outputting build matrix..."
        echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT" || {
          log_error "Failed to output build matrix."
          exit 1
        }
        
        log_success "Successfully outputted build matrix."

  build-images:
    needs: determine-matrix
    runs-on: ubuntu-24.04
    strategy:
      matrix: ${{ fromJson(needs.determine-matrix.outputs.matrix) }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Build Image
      run: ./.github/workflows/builds/${{ matrix.path }}
