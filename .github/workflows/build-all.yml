name: Trigger Build ALL Images

permissions:
  actions: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      build_all_images:
        description: 'Build all images'
        required: true
        default: 'true'
      exclude_images:
        description: 'Exclude images (comma-separated list, e.g., "aws,azure")'
        required: false
        default: ''

jobs:
  determine-matrix:
    runs-on: ubuntu-24.04
    
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Generate Build Matrix
        id: set-matrix
        run: |
          # Define colors for logging
          GREEN='\033[38;5;82m'   # Bright green
          ORANGE='\033[38;5;208m' # Bright orange
          RED='\033[38;5;196m'    # Bright red
          RESET='\033[0m'         # Reset to default color

          log_success() { printf "${GREEN}[SUCCESS] %s${RESET}\n\n" "$1"; }
          log_warning() { printf "${ORANGE}[WARNING] %s${RESET}\n" "$1"; }
          log_error() { printf "${RED}[ERROR] %s${RESET}\n" "$1"; }
          log_info() { printf "[INFO] %s\n" "$1"; }

          # Convert excluded images to an array
          log_info "Parsing excluded images..."
          EXCLUDED_IMAGES="${{ github.event.inputs.exclude_images }}"  # Read input

          # If EXCLUDED_IMAGES is empty or unset, initialize an empty array
          if [[ -z "$EXCLUDED_IMAGES" ]]; then
            log_warning "No images excluded, setting empty list."
            EXCLUDED=()
          else
            IFS=',' read -ra EXCLUDED <<< "$EXCLUDED_IMAGES"
          fi
          log_success "Successfully parsed excluded images: ${EXCLUDED[*]}"

          # Define all possible cloud images
          log_info "Defining all possible cloud images..."
          ALL_IMAGES='[
            { "name": "alicloud", "path": "build-alicloud.yml" },
            { "name": "aws", "path": "build-aws.yml" },
            { "name": "azure", "path": "build-azure.yml" },
            { "name": "digital_ocean", "path": "build-digital-ocean.yml" },
            { "name": "gcp", "path": "build-gcp.yml" },
            { "name": "hetzner", "path": "build-hetzner.yml" },
            { "name": "huawei", "path": "build-huawei.yml" },
            { "name": "ibm", "path": "build-ibm.yml" },
            { "name": "linode", "path": "build-linode.yml" },
            { "name": "oci", "path": "build-oci.yml" },
            { "name": "ovh", "path": "build-ovh.yml" },
            { "name": "tencent", "path": "build-tencent.yml" },
            { "name": "vultr", "path": "build-vultr.yml" }
          ]'
          log_success "Successfully defined all possible cloud images."

          # Convert EXCLUDED array to JSON
          log_info "Converting excluded images to JSON format..."
          if [[ ${#EXCLUDED[@]} -eq 0 ]]; then
            EXCLUDED_JSON='[]'
          else
            EXCLUDED_JSON=$(printf '%s\n' "${EXCLUDED[@]}" | jq -R . | jq -s .) || {
              log_error "Failed to convert excluded images to JSON!"
              exit 1
            }
          fi
          log_success "Successfully converted excluded images: $EXCLUDED_JSON"

          # Filter the build matrix
          log_info "Filtering build matrix..."
          MATRIX=$(echo "$ALL_IMAGES" | jq --argjson excluded "$EXCLUDED_JSON" '
            map(select(.name as $name | $excluded | index($name) | not))
          ') || {
            log_error "Failed to filter build matrix!"
            exit 1
          }
          log_success "Successfully filtered build matrix: $MATRIX"

          # Ensure matrix is not empty
          log_info "Checking if build matrix is empty..."
          if [[ -z "$MATRIX" || "$MATRIX" == "[]" ]]; then
            log_error "No images to build after exclusions!"
            exit 1
          fi
          log_success "Build matrix is not empty."

          # Output the build matrix
          log_info "Outputting build matrix to GitHub Actions..."
          echo "matrix=$(echo "$MATRIX" | jq -c '{include: .}')" >> "$GITHUB_OUTPUT" || {
            log_error "Failed to output build matrix to GitHub Actions!"
            exit 1
          }
          log_success "Successfully output build matrix to GitHub Actions."


  build-images:
    needs: determine-matrix
    runs-on: ubuntu-24.04

    strategy:
      matrix: ${{ fromJson(needs.determine-matrix.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define colors for logging
          GREEN='\033[38;5;82m'   # Bright green
          ORANGE='\033[38;5;208m' # Bright orange
          RED='\033[38;5;196m'    # Bright red
          RESET='\033[0m'         # Reset to default color

          log_success() { printf "${GREEN}[SUCCESS] %s${RESET}\n\n" "$1"; }
          log_warning() { printf "${ORANGE}[WARNING] %s${RESET}\n" "$1"; }
          log_error() { printf "${RED}[ERROR] %s${RESET}\n" "$1"; }
          log_info() { printf "[INFO] %s\n" "$1"; }

          # Trigger the build workflow for each image
          log_info "Triggering build workflow for ${{ matrix.name }}..."
          gh workflow run "${{ matrix.path }}" --ref main || {
            log_error "Failed to trigger build workflow for ${{ matrix.name }}!"
            exit 1
          }
          log_success "Successfully triggered build workflow for ${{ matrix.name }}."