name: Packer Validate Syntax (Multicloud)

permissions:
  security-events: write

on:
  push:
    branches: [main, stage, dev]
  pull_request:
    branches: [main, stage, dev]

env:
  PACKER_VERSION: "1.12.0"

jobs:
  packer-validate:
    name: Run Packer Validate for Multi-Cloud Templates
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Run Packer Validate for Multi-Cloud Templates
        run: |
          # Color codes
          GREEN='\033[38;5;82m'   # Bright green
          ORANGE='\033[38;5;208m' # Bright orange
          RED='\033[38;5;196m'    # Bright red
          RESET='\033[0m'         # Reset to default color

          # Logging functions for colored messages
          log_success() {
              printf "${GREEN}[SUCCESS] %s${RESET}\n\n" "$1"
          }
          log_warning() {
              printf "${ORANGE}[WARNING] %s${ORANGE}\n" "$1"
          }
          log_error() {
              printf "${RED}[ERROR] %s${RESET}\n" "$1"
          }
          log_info() {
              printf "[INFO] %s\n" "$1"
          }

          # Initialize SARIF file
          echo "{ \"version\": \"2.1.0\", \
                  \"\$schema\": \"https://json.schemastore.org/sarif-2.1.0.json\", \
                  \"runs\": [{ \
                    \"tool\": { \
                      \"driver\": { \
                        \"name\": \"Packer Validate\", \
                        \"fullName\": \"Packer Validate (Multi-Cloud)\", \
                        \"version\": \"${{ env.PACKER_VERSION }}\", \
                        \"informationUri\": \"https://developer.hashicorp.com/packer/docs/commands/validate\", \
                        \"rules\": [{ \
                          \"id\": \"PV001\", \
                          \"name\": \"PackerValidationError\", \
                          \"fullDescription\": { \
                            \"text\": \"A validation error occurred while checking the Packer template.\" \
                          }, \
                          \"helpUri\": \"https://developer.hashicorp.com/packer/docs/commands/validate\", \
                          \"help\": { \
                            \"text\": \"Ensure your Packer template is correctly formatted and meets all validation requirements.\" \
                          } \
                        }] \
                      } \
                    }, \
                    \"results\": [" > packer-results.sarif

          
          # Find all Packer template files (*.pkr.hcl) while excluding certain directories
          find . \
            -type d \( -path "./.github/workflows" -o -path "./.git" -o -path "./docs" -o -path ./terraform \) -prune -o \
            -name "*.pkr.hcl" -print | while read -r file; do

              # Echo which root folder is being processed
              folder=$(echo "$file" | sed -E 's#^\./##; s#/.*##') || {
                log_error "Failed to extract folder name from $file"
              }
              log_info "Processing $folder..."

              # Get the directory of the file
              template_dir=$(dirname "$file") || {
                log_error "Failed to get the directory of $file" 
              }

              # Initialize Packer plugins in the directory
              log_info "Initializing Packer plugins in $template_dir..."
              packer init "$template_dir" || {
                log_error "Failed to initialize Packer plugins in $template_dir"
              }

              # Run syntax-only validation
              log_info "Running syntax-only validation for $file..."
              validation_output=$(packer validate -syntax-only "$file" 2>&1) 
              validation_status=$?

              # If validation fails, log the error message in SARIF format
              if [ $validation_status -ne 0 ]; then
                
                # Log error message
                log_error "Validation failed for $file with exit status $validation_status"
                escaped_output=$(echo "$validation_output" | jq -R -s '.') || {
                  log_error "Failed to escape validation output for $file"
                }
                
                # Add error message to SARIF file
                log_info "Adding error message to SARIF file..."
                echo "{ \
                  \"ruleId\": \"PV001\", \
                  \"ruleIndex\": 0, \
                  \"level\": \"error\", \
                  \"message\": { \
                    \"text\": \"Validation failed for $file with exit status $validation_status: $escaped_output\" \
                  }, \
                  \"locations\": [{ \
                    \"physicalLocation\": { \
                      \"artifactLocation\": { \
                        \"uri\": \"$file\" \
                      } \
                    } \
                  }] \
                }," >> packer-results.sarif
                log_info "Error message added to SARIF file for $file"

              else
                log_success "Validation passed for $file"
              fi
          done
          log_success "Packer Validate commands completed successfully!"

          # Close SARIF JSON structure properly
          log_info "Closing Packer Validate SARIF file..."
          sed -i '$ s/,$//' packer-results.sarif
          echo "] }] }" >> packer-results.sarif
          log_success "Packer Validate SARIF file created successfully!"

      - name: Create a Packer Validate SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: packer-results.sarif

      - name: Upload Packer Validate results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: packer-results.sarif