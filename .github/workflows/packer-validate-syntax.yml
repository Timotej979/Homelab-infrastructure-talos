name: Packer Validate Syntax (Multicloud)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  security-events: write

env:
  PACKER_VERSION: "latest"

jobs:
  packer-validate:
    name: Run Packer Validate for Multi-Cloud Templates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Run Packer Validate for Multi-Cloud Templates
        run: |
          # Logging functions for colored messages
          log_success() {
              printf "${GREEN}[SUCCESS] %s${RESET}\n" "$1"
          }
          log_warning() {
              printf "${ORANGE}[WARNING] %s${ORANGE}\n" "$1"
          }
          log_error() {
              printf "${RED}[ERROR] %s${RESET}\n" "$1"
          }
          log_info() {
              printf "[INFO] %s\n" "$1"
          }

          # Initialize SARIF file
          echo "{ \"version\": \"2.1.0\", \
                  \"\$schema\": \"https://json.schemastore.org/sarif-2.1.0.json\", \
                  \"runs\": [\
                    { \"tool\": \
                      { \"driver\": \
                        { \"name\": \"Packer Validate\", \
                          \"informationUri\": \"https://developer.hashicorp.com/packer/docs/commands/validate\" \
                        }\
                      },\
                      \"results\": [\"" > packer-results.sarif
          
          # Find all Packer template files (*.pkr.hcl) while excluding certain directories
          find . \
            -type d \( -path "./.github/workflows" -o -path "./.git" \) -prune -o \
            -name "*.pkr.hcl" -print | while read -r file; do

              # Echo which root folder is being processed (Green color, extract folder name)
              folder=$(echo "$file" | sed -E 's#^\./##; s#/.*##') || {
                log_error "Failed to extract folder name from $file"
                
              }
              log_info "Processing $folder..."

              # Get the directory of the file
              template_dir=$(dirname "$file") || {
                log_error "Failed to get the directory of $file" 
              }

              # Initialize Packer plugins in the directory
              log_info "Initializing Packer plugins in $template_dir..."
              packer init "$template_dir" || {
                log_error "Failed to initialize Packer plugins in $template_dir"
              }

              # Run syntax-only validation
              log_info "Running syntax-only validation for $file..."
              validation_output=$(packer validate -syntax-only "$file" 2>&1) 
              validation_status=$?

              # If validation fails, log the error message in SARIF format
              if [ $validation_status -ne 0 ]; then
                log_error "Validation failed for $file"
                log_warning "$validation_output"
                escaped_output=$(echo "$validation_output" | jq -R -s '.')
                log_warning "Escaped output: $escaped_output"
              else
                log_success "Validation passed for $file"
                log_success ""
              fi
          done

          log_success "Packer Validate commands completed successfully!"

          log_info "Closing Packer Validate SARIF file..."

          # Close SARIF JSON structure properly
          sed -i '$ s/,$//' packer-results.sarif
          echo ']}]}' >> packer-results.sarif

          echo "DEBUG: SARIF file content:"
          cat packer-results.sarif

          log_success "Packer Validate SARIF file created successfully!"

      - name: Create a Packer Validate SARIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: packer-results.sarif

      - name: Upload Packer Validate results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: packer-results.sarif